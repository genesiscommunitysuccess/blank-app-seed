import { Connect } from '@genesislcap/foundation-comms';
import { User } from '@genesislcap/foundation-user';
import { customElement, GenesisElement, observable } from '@genesislcap/web-core';
import { {{pascalCase tile.title}}Styles as styles } from './{{kebabCase tile.title}}.styles';
import { {{pascalCase tile.title}}Template as template } from './{{kebabCase tile.title}}.template';
{{#if tile.config.columns}}
import { columnDefs } from './{{kebabCase tile.title}}.column.defs';
import { ColDef } from '@ag-grid-community/core';
{{/if}}
{{#if tile.config.customEvents}}
import type { ActionRendererParams } from '@genesislcap/rapid-grid-pro';
import { RapidAgActionRenderer } from '@genesislcap/rapid-grid-pro';
import { Modal } from '@genesislcap/rapid-design-system';
import { customEvents, customEventFormSchemas } from './{{kebabCase tile.title}}.events.config';
import { handleFormCustomEvent, handleNonFormCustomEvent, showCustomEventConfirmation, type CustomEvent, type CustomEventState } from '../../../utils/customEvents';
{{/if}}

{{#ifAny tile.metadata.comment tile.metadata.todo}}
/**
{{~#if tile.metadata.comment}}{{{ tile.metadata.comment }}}{{/if}}
{{~#if tile.metadata.todo}}{{#if tile.metadata.comment}} 
 *{{/if}}
 * TODO: {{{ tile.metadata.todo }}}{{/if}}
 */
{{/ifAny}}

@customElement({
  name: '{{kebabCase tile.componentName}}',
  template,
  styles,
})
export class {{pascalCase tile.componentName}} extends GenesisElement {
  @User user: User;
  @Connect connect!: Connect;

  {{#if tile.config.customEvents}}
  customEventModal: Modal;
  @observable customEvents: CustomEvent[] = customEvents;
  @observable activeCustomEvent: CustomEventState | null = null;
  @observable customEventFormData: Record<string, any> = {};

  async handleCustomEventSubmit() {
    this.activeCustomEvent = null;
    this.customEventFormData = {};
    this.customEventModal.close();
  }

  async handleCustomEventClick(eventName: string, rowData: any) {
    const customEvent = this.customEvents.find(e => e.name === eventName);
    if (!customEvent) return;

    if (customEvent.hasForm) {
      handleFormCustomEvent(
        customEvent,
        rowData,
        (data) => this.customEventFormData = data,
        (event) => this.activeCustomEvent = event,
        () => this.customEventModal.show()
      );
    } else {
      await handleNonFormCustomEvent(
        this.connect,
        customEvent,
        rowData,
        (onConfirm) => showCustomEventConfirmation(customEvent, onConfirm)
      );
    }
  }

  getActiveCustomEvent() {
    if (!this.activeCustomEvent) return null;
    return this.customEvents.find(e => e.name === this.activeCustomEvent.name);
  }

  getCustomEventModalTitle() {
    const customEvent = this.getActiveCustomEvent();
    return customEvent?.name || 'Custom Event';
  }

  getCustomEventResourceName() {
    if (!this.activeCustomEvent) return '';
    return `EVENT_${this.activeCustomEvent.event}`;
  }

  getCustomEventUiSchema() {
    const customEvent = this.getActiveCustomEvent();
    if (!customEvent) return null;
    return customEventFormSchemas[customEvent.name];
  }
  {{/if}}

  {{#if tile.config.columns}}
  @observable columns: ColDef[] = [
    ...columnDefs,
    {{#if tile.config.customEvents}}
    {{#each tile.config.customEvents}}
    {
      field: '',
      headerName: '',
      minWidth: 50,
      maxWidth: 50,
      headerTooltip: '{{this.tooltip}}',
      pinned: 'right',
      cellRenderer: RapidAgActionRenderer,
      cellRendererParams: <ActionRendererParams>{
        actionClick: async (rowData) => {
          await this.handleCustomEventClick('{{this.name}}', rowData);
        },
        contentTemplate: `
          <rapid-icon name="{{this.icon}}"></rapid-icon>
        `,
      },
    },
    {{/each}}
    {{/if}}
  ];
  {{/if}}
}