{{#if tile.config.createFormUiSchema}}
import { createFormSchema } from './{{kebabCase tile.title}}.create.form.schema';
{{/if}}
{{#if tile.config.uischema}}
import { createFormSchema } from './{{kebabCase tile.title}}.create.form.schema';
{{/if}}
{{#if tile.config.updateFormUiSchema}}
import { updateFormSchema } from './{{kebabCase tile.title}}.update.form.schema';
{{/if}}
{{#if tile.config.columns}}
import { columnDefs } from './{{kebabCase tile.title}}.column.defs';
{{/if}}
{{#if tile.config.gridOptions}}
import { gridOptions as tileGridOptions } from './{{kebabCase tile.title}}.gridOptions';
{{/if}}
import './{{kebabCase tile.title}}.component.css';

export const {{pascalCase tile.componentName}} = () => { {{#if tile.config.createFormUiSchema}}
  const createFormSchema = createFormSchema;{{/if}}{{#if tile.config.uischema}}
  const uischema = createFormSchema;{{/if}}{{#if tile.config.updateFormUiSchema}}
  const updateFormSchema = updateFormSchema;{{/if}}{{#if tile.config.columns}}
  const columnDefs = columnDefs;{{/if}}{{#if tile.config.gridOptions}}
  const gridOptions = tileGridOptions;{{/if}}{{#if tile.config.reqrep}}
  const reqrep = { pollingInterval: 5000 };{{/if}}{{#if tile.config.type}}
  const chartConfig = { {{#ifEquals tile.config.type 'pie'}}
      "radius": 0.75,
      "angleField": "value",
      "colorField": "groupBy",{{else}}
      "xField": "groupBy",
      "yField": "value",{{/ifEquals}}
  };{{/if}}

  return (
    {{> (lookup tile 'type') tile}}
  );
};
