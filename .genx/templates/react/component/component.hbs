{{#if tile.config.permissions.viewRight~}}
import { getUser } from '@genesislcap/foundation-user';
{{#if tile.config.customEvents}}
import { customEvent } from '@genesislcap/foundation-events';
{{/if}}
import { getViewUpdateRightComponent{{#if tile.config.customEvents}}, submitFailureNotification{{/if}} } from '../../../utils';
import ErrorMessage from '../../../components/ErrorMessage/ErrorMessage';
{{else if tile.config.permissions.updateRight~}}
import { getUser } from '@genesislcap/foundation-user';
{{#if tile.config.customEvents}}
import { customEvent } from '@genesislcap/foundation-events';
{{/if}}
import { getViewUpdateRightComponent{{#if tile.config.customEvents}}, submitFailureNotification{{/if}} } from '../../../utils';
import ErrorMessage from '../../../components/ErrorMessage/ErrorMessage';
{{/if}}
{{#if tile.config.customEvents}}
import { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { getConnect } from '@genesislcap/foundation-comms';
import type { ActionRendererParams } from '@genesislcap/rapid-grid-pro';
import { RapidAgActionRenderer } from '@genesislcap/rapid-grid-pro';
import { Modal } from '@genesislcap/rapid-design-system';
import { customEvents, customEventFormSchemas } from './{{pascalCase tile.title}}EventsConfig';
import { useCustomEvent, type CustomEventHandler, type CustomEventState } from '../../../utils/customEvents';
{{/if}}
{{#if tile.config.createFormUiSchema~}}
import { createFormSchema as createFormSchemaTile } from './{{pascalCase tile.title}}CreateFormSchema';
{{/if}}
{{#if tile.config.uischema~}}
import { createFormSchema as createFormSchemaTile } from './{{pascalCase tile.title}}CreateFormSchema';
{{/if}}
{{#if tile.config.updateFormUiSchema~}}
import { updateFormSchema as updateFormSchemaTile } from './{{pascalCase tile.title}}UpdateFormSchema';
{{/if}}
{{#if tile.config.columns~}}
import { columnDefs as columnDefsTile } from './{{pascalCase tile.title}}ColumnDefs';
{{/if}}
{{#if tile.config.gridOptions~}}
import { GridOptionsConfig } from '@genesislcap/rapid-grid-pro';
import { gridOptions as gridOptionsTile } from './{{pascalCase tile.title}}GridOptions';
{{/if}}
import './{{pascalCase tile.title}}Component.css';

{{#ifAny tile.metadata.comment tile.metadata.todo}}
/**
{{~#if tile.metadata.comment}}{{{ tile.metadata.comment }}}{{/if}}
{{~#if tile.metadata.todo}}{{#if tile.metadata.comment}}
 *{{/if}}
 * TODO: {{{ tile.metadata.todo }}}{{/if}}
 */
{{/ifAny}}

export const {{pascalCase tile.componentName}}: React.FC = () => {
  {{#if tile.config.permissions.viewRight~}}
  const hasUserPermission = (permissionCode: string): boolean => getViewUpdateRightComponent(getUser(), permissionCode);
  {{else if tile.config.permissions.updateRight~}}
  const hasUserPermission = (permissionCode: string): boolean => getViewUpdateRightComponent(getUser(), permissionCode);
  {{/if}}
  {{#if tile.config.createFormUiSchema~}}
  const createFormSchema: typeof createFormSchemaTile = createFormSchemaTile;
  {{/if}}
  {{#if tile.config.uischema~}}
  const uischema: typeof createFormSchemaTile = createFormSchemaTile;
  {{/if}}
  {{#if tile.config.updateFormUiSchema~}}
  const updateFormSchema: typeof updateFormSchemaTile = updateFormSchemaTile;
  {{/if}}
  {{#if tile.config.columns~}}
  const columnDefs: typeof columnDefsTile = [
    ...columnDefsTile,
    {{#if tile.config.customEvents}}
    /**
     * TODO: Update the action button's icon under `contentTemplate` below.
     * More information about rapid-icon can be found at: https://docs.genesis.global/docs/develop/client-capabilities/presentation/client-presentation-icon/
     **/
    {{#each tile.config.customEvents}}
    {
      field: '',
      headerName: '',
      minWidth: 50,
      maxWidth: 50,
      headerTooltip: '{{this.tooltip}}',
      pinned: 'right',
      cellRenderer: RapidAgActionRenderer,
      cellRendererParams: {
        actionClick: async (rowData) => {
          const customEvent = customEvents.find(e => e.name === '{{this.name}}');
          if (customEvent) {
            const handleCustomEvent = useCustomEvent(
              customEvent,
              rowData,
              setCustomEventFormData,
              setActiveCustomEvent
            );
            await handleCustomEvent();
          }
        },
        contentTemplate: `
          <rapid-icon name="{{this.icon}}"></rapid-icon>
        `,
      } as ActionRendererParams,
    },
    {{/each}}
    {{/if}}
  ];
  {{/if}}
  {{#if tile.config.gridOptions~}}
  const deferredGridOptions: { onRowClicked: GridOptionsConfig.onRowClicked } = { onRowClicked: gridOptionsTile?.onRowClicked  }
  {{/if}}
  {{#if tile.config.reqrep~}}
  const reqrep: { pollingInterval: number } = { pollingInterval: 5000 };
  {{/if}}
  {{#if tile.config.type~}}
  const chartConfig: {
    {{#ifEquals tile.config.type 'pie'~}}
    radius: number;
    angleField: string;
    colorField: string;
    {{else~}}
    xField: string;
    yField: string;
    {{/ifEquals}}
  } = {
    {{#ifEquals tile.config.type 'pie'~}}
    radius: 0.75,
    angleField: 'value',
    colorField: 'groupBy',
    {{else~}}
    xField: 'groupBy',
    yField: 'value',
    {{/ifEquals}}
  };
  {{/if}}

  {{#if tile.config.customEvents}}
  const customEventModalRef = useRef<Modal>(null);
  const [activeCustomEvent, setActiveCustomEvent] = useState<CustomEventState | null>(null);
  const [customEventFormData, setCustomEventFormData] = useState<Record<string, any>>({});

  useEffect(() => {
    if (activeCustomEvent) {
      customEventModalRef.current?.show();
    } else {
      customEventModalRef.current?.close();
    }
  }, [activeCustomEvent]);

  const handleCustomEventSubmit = () => {
    setActiveCustomEvent(null);
    setCustomEventFormData({});
  };

  const getActiveCustomEvent = () => {
    if (!activeCustomEvent) return null;
    return customEvents.find(e => e.name === activeCustomEvent.name);
  };

  const getCustomEventModalTitle = () => {
    const customEvent = getActiveCustomEvent();
    return customEvent?.name || 'Custom Event';
  };

  const getCustomEventResourceName = () => {
    if (!activeCustomEvent) return '';
    return `EVENT_${activeCustomEvent.event}`;
  };

  const getCustomEventUiSchema = () => {
    const customEvent = getActiveCustomEvent();
    return customEvent && customEvent.name in customEventFormSchemas
      ? customEventFormSchemas[customEvent.name as keyof typeof customEventFormSchemas]
      : null;
  };

  const renderFormModal = () => {
    if (!activeCustomEvent) return null;

    return createPortal(
      <rapid-modal
        ref={customEventModalRef}
        onCloseCallback={() => setActiveCustomEvent(null)}
        title={getCustomEventModalTitle()}
      >
        <foundation-form
          resourceName={getCustomEventResourceName()}
          uischema={getCustomEventUiSchema()}
          data={customEventFormData}
          onsubmit-success={handleCustomEventSubmit}
          onsubmit={submitFailureNotification}
          onsubmit-failure={submitFailureNotification}
        ></foundation-form>
      </rapid-modal>,
      document.querySelector('rapid-design-system-provider')!
    );
  };
  {{/if}}

  return (
    {{> (lookup tile 'type') tile}}
  );
};
