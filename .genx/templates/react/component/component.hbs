{{#if tile.config.permissions.viewRight~}}
import { getUser } from '@genesislcap/foundation-user';
import { getViewUpdateRightComponent } from '../../../utils';
import ErrorMessage from '../../../components/ErrorMessage/ErrorMessage';
{{else if tile.config.permissions.updateRight~}}
import { getUser } from '@genesislcap/foundation-user';
import { getViewUpdateRightComponent } from '../../../utils';
import ErrorMessage from '../../../components/ErrorMessage/ErrorMessage';
{{/if}}
{{#if tile.config.createFormUiSchema~}}
import { createFormSchema as createFormSchemaTile } from './{{pascalCase tile.title}}CreateFormSchema';
{{/if}}
{{#if tile.config.uischema~}}
import { createFormSchema as createFormSchemaTile } from './{{pascalCase tile.title}}CreateFormSchema';
{{/if}}
{{#if tile.config.updateFormUiSchema~}}
import { updateFormSchema as updateFormSchemaTile } from './{{pascalCase tile.title}}UpdateFormSchema';
{{/if}}
{{#if tile.config.columns~}}
import { columnDefs as columnDefsTile } from './{{pascalCase tile.title}}ColumnDefs';
{{/if}}
{{#if tile.config.gridOptions~}}
import { GridOptionsConfig } from '@genesislcap/rapid-grid-pro';
import { gridOptions as gridOptionsTile } from './{{pascalCase tile.title}}GridOptions';
{{/if}}
import './{{pascalCase tile.title}}Component.css';

export const {{pascalCase tile.componentName}}: React.FC = () => {
  {{#if tile.config.permissions.viewRight~}}
  const hasUserPermission = (permissionCode: string): boolean => getViewUpdateRightComponent(getUser(), permissionCode);
  {{else if tile.config.permissions.updateRight~}}
  const hasUserPermission = (permissionCode: string): boolean => getViewUpdateRightComponent(getUser(), permissionCode);
  {{/if}}
  {{#if tile.config.createFormUiSchema~}}
  const createFormSchema: typeof createFormSchemaTile = createFormSchemaTile;
  {{/if}}
  {{#if tile.config.uischema~}}
  const uischema: typeof createFormSchemaTile = createFormSchemaTile;
  {{/if}}
  {{#if tile.config.updateFormUiSchema~}}
  const updateFormSchema: typeof updateFormSchemaTile = updateFormSchemaTile;
  {{/if}}
  {{#if tile.config.columns~}}
  const columnDefs: typeof columnDefsTile = columnDefsTile;
  {{/if}}
  {{#if tile.config.gridOptions~}}
  const deferredGridOptions: { onRowClicked: GridOptionsConfig.onRowClicked } = { onRowClicked: gridOptionsTile?.onRowClicked  }
  {{/if}}
  {{#if tile.config.reqrep~}}
  const reqrep: { pollingInterval: number } = { pollingInterval: 5000 };
  {{/if}}
  {{#if tile.config.type~}}
  const chartConfig: {
    {{#ifEquals tile.config.type 'pie'~}}
    radius: number;
    angleField: string;
    colorField: string;
    {{else~}}
    xField: string;
    yField: string;
    {{/ifEquals}}
  } = {
    {{#ifEquals tile.config.type 'pie'~}}
    radius: 0.75,
    angleField: 'value',
    colorField: 'groupBy',
    {{else~}}
    xField: 'groupBy',
    yField: 'value',
    {{/ifEquals}}
  };
  {{/if}}

  return (
    {{> (lookup tile 'type') tile}}
  );
};