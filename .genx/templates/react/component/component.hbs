import { useEffect } from 'react';
{{#if tile.config.permissions.viewRight~}}
import { getUser } from '@genesislcap/foundation-user';
import { getViewUpdateRightComponent } from '../../../utils';
import ErrorMessage from '../../../components/ErrorMessage/ErrorMessage';
{{else if tile.config.permissions.updateRight~}}
import { getUser } from '@genesislcap/foundation-user';
{{#if tile.config.customEvents}}
import { customEvent } from '@genesislcap/foundation-events';
{{/if}}
import { getViewUpdateRightComponent{{#if tile.config.customEvents}}, submitFailureNotification{{/if}} } from '../../../utils';
import ErrorMessage from '../../../components/ErrorMessage/ErrorMessage';
{{/if}}
{{#if tile.config.customEvents}}
import { customActions } from './{{pascalCase tile.title}}EventsConfig';
{{/if}}
{{#if tile.config.createFormUiSchema~}}
import { createFormSchema as createFormSchemaTile } from './{{pascalCase tile.title}}CreateFormSchema';
{{/if}}
{{#if tile.config.uischema~}}
import { createFormSchema as createFormSchemaTile } from './{{pascalCase tile.title}}CreateFormSchema';
{{/if}}
{{#if tile.config.updateFormUiSchema~}}
import { updateFormSchema as updateFormSchemaTile } from './{{pascalCase tile.title}}UpdateFormSchema';
{{/if}}
{{#if tile.config.columns~}}
import { columnDefs as columnDefsTile } from './{{pascalCase tile.title}}ColumnDefs';
{{/if}}
{{#if tile.config.gridOptions~}}
import { GridOptionsConfig } from '@genesislcap/rapid-grid-pro';
import { gridOptions as gridOptionsTile } from './{{pascalCase tile.title}}GridOptions';
{{/if}}
{{#if tile.config.eventing.publishEventName}}
import { actions } from '../../../store/store';
{{/if}}
{{#if tile.config.eventing.listener}}
import { useSelector } from 'react-redux';
import { selectors } from '../../../store/store';
{{/if}}
import { layoutComponentsMap, LayoutComponentNames } from '../../../store/store';
import { getElementByTagFromComponent } from '../../../utils/goldenLayout.helper';
import './{{pascalCase tile.title}}Component.css';

{{#ifAny tile.metadata.comment tile.metadata.todo}}
/**
{{~#if tile.metadata.comment}}{{{ tile.metadata.comment }}}{{/if}}
{{~#if tile.metadata.todo}}{{#if tile.metadata.comment}}
 *{{/if}}
 * TODO: {{{ tile.metadata.todo }}}{{/if}}
 */
{{/ifAny}}

export const {{pascalCase tile.componentName}}: React.FC = () => {
  {{#if tile.config.permissions.viewRight}}
  const hasUserPermission = (permissionCode: string): string | boolean => getViewUpdateRightComponent(getUser(), permissionCode);
  {{else if tile.config.permissions.updateRight}}
  const hasUserPermission = (permissionCode: string): string | boolean => getViewUpdateRightComponent(getUser(), permissionCode);
  {{/if}}
  {{#if tile.config.eventing.publishEventName}}
  const handleRowSelection = (e: any) => {
    const selectedRows = e.api.getSelectedRows();
    if (!selectedRows || !selectedRows.length) {
      actions.eventing.publish{{pascalCase tile.config.eventing.publishEventName}}(null);
      return;
    }
    const { TIMESTAMP, RECORD_ID, ROW_REF, ...data } = selectedRows[0];
    actions.eventing.publish{{pascalCase tile.config.eventing.publishEventName}}(data);
  };
  {{/if}}
  {{#if tile.config.createFormUiSchema}}
  const createFormSchema: typeof createFormSchemaTile = createFormSchemaTile;
  {{/if}}
  {{#if tile.config.uischema}}
  const uischema: typeof createFormSchemaTile = createFormSchemaTile;
  {{/if}}
  {{#if tile.config.updateFormUiSchema}}
  const updateFormSchema: typeof updateFormSchemaTile = updateFormSchemaTile;
  {{/if}}
  {{#if tile.config.columns}}
  const columnDefs: typeof columnDefsTile = [...columnDefsTile];
  {{/if}}
  {{#ifAny tile.config.gridOptions tile.config.eventing.publishEventName}}
  const gridOptions: { {{#if tile.config.gridOptions}}onRowClicked: GridOptionsConfig.onRowClicked, {{/if}}{{#if tile.config.eventing.publishEventName}}onSelectionChanged: any, rowSelection: 'multiple' | 'single'{{/if}} } = { 
    {{#if tile.config.gridOptions}}
    onRowClicked: gridOptionsTile?.onRowClicked,
    {{/if}}
    {{#if tile.config.eventing.publishEventName}}
    onSelectionChanged: handleRowSelection,
    rowSelection: 'single',
    {{/if}}
  }
  {{/ifAny}}
  {{#ifAny tile.config.snapshot tile.config.reqrep tile.config.eventing.listener}}
  const datasourceConfig: { isSnapshot?: boolean, pollingInterval?: string, requestAutoSetup?: string, criteria?: string } = {
    {{#if tile.config.snapshot}}
    isSnapshot: {{ tile.config.snapshot }},
    {{/if}}
    {{#if tile.config.reqrep}}
    pollingInterval: '5000',
    requestAutoSetup: 'false',
    {{/if}}
    {{#if tile.config.eventing.listener}}
    criteria: useSelector(selectors.eventing.getCriteriaFor{{pascalCase tile.title}}),
    {{/if}}
  }
  {{/ifAny}}
  {{#if tile.componentType}}
  {{#ifEquals tile.componentType 'grid'}}
  useEffect(() => {
    const componentElement = layoutComponentsMap.get(LayoutComponentNames.{{constantCase tile.componentName}});
    const componentDatasource = componentElement ? getElementByTagFromComponent(componentElement, 'grid-pro-genesis-datasource') : undefined;

    if (componentDatasource) {
      {{#if tile.config.eventing.listener}}
      componentDatasource.criteria = datasourceConfig.criteria;
      {{/if}}
      {{#if tile.config.reqrep}}
      componentDatasource.requestAutoSetup = datasourceConfig.requestAutoSetup;
      componentDatasource.pollingInterval = datasourceConfig.pollingInterval;
      {{/if}}
    }
  }, [datasourceConfig]);
  {{/ifEquals}}
  {{/if}}
  {{#if tile.componentType}}
  {{#ifEquals tile.componentType 'manager'}}
  useEffect(() => {
    const componentElement = layoutComponentsMap.get(LayoutComponentNames.{{constantCase tile.componentName}});
    const componentDatasource = componentElement ? getElementByTagFromComponent(componentElement, 'entity-management') : undefined;

    if (componentDatasource) {
      componentDatasource.datasourceConfig = datasourceConfig;
    }
  }, [datasourceConfig]);
  {{/ifEquals}}
  {{/if}}

  {{#if tile.config.type}}
  const chartConfig: {
    {{#ifEquals tile.config.type 'pie'}}
    radius: number;
    angleField: string;
    colorField: string;
    {{else~}}
    xField: string;
    yField: string;
    {{/ifEquals}}
  } = {
    {{#ifEquals tile.config.type 'pie'}}
    radius: 0.75,
    angleField: 'value',
    colorField: 'groupBy',
    {{else~}}
    xField: 'groupBy',
    yField: 'value',
    {{/ifEquals}}
  };
  {{/if}}

  return (
    {{> (lookup tile 'type') tile}}
  );
};
