// This file is generated from a Handlebars template for dynamic layout generation
import { Component, ViewChild, ElementRef, AfterViewInit, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { configureDesignSystem, FoundationRouteNavItem } from '@genesislcap/foundation-ui';
import { baseLayerLuminance, StandardLuminance } from '@genesislcap/web-core';
import * as designTokens from '../../../styles/design-tokens.json';
import { RouteService } from '../../services/route.service';
import BaseLayout from '../base.layout';
import { registerStylesTarget } from '../../../pbc/utils';
import { GridsterConfig, GridsterItem } from 'angular-gridster2';

{{!-- Helper for tile name --}}
{{#*inline "tileName"}}{{#if this.name}}{{kebabCase this.name}}{{else}}{{kebabCase this.title}}{{/if}}{{/inline}}

{{!-- Helper for class name --}}
{{#*inline "tileClassName"}}{{pascalCase name}}{{#if this.name}}{{pascalCase this.name}}{{else}}{{pascalCase this.title}}{{/if}}{{pascalCase this.type}}{{/inline}}

{{#each route.tiles}}
import { Analytics{{pascalCase (replace this.title "_" "")}}{{pascalCase this.type}} } from '../pages/{{kebabCase ../route.name}}/{{kebabCase this.title}}-{{kebabCase this.type}}/{{kebabCase this.title}}.component';
{{/each}}

@Component({
  selector: 'app-default-layout',
  templateUrl: './default.layout.html',
  styleUrls: ['./default.layout.css'],
})
export class DefaultLayoutComponent extends BaseLayout implements OnInit {
  @ViewChild('designSystemProvider') designSystemProviderElement!: ElementRef;
  navItems: FoundationRouteNavItem[] = [];
  options: GridsterConfig = {};
  dashboard: Array<GridsterItem & { component: any }> = [
    {{#each route.tiles}}
    { x: {{#if this.x}}{{this.x}}{{else}}{{@index}}{{/if}}, y: {{#if this.y}}{{this.y}}{{else}}0{{/if}}, cols: 1, rows: 1, label: '{{this.title}}', component: Analytics{{pascalCase (replace this.title "_" "")}}{{pascalCase this.type}} },
    {{/each}}
  ];

  constructor(
    private el: ElementRef,
    router: Router,
    routeService: RouteService,
  ) {
    super(router);
    this.navItems = routeService.getNavItems();
  }

  ngAfterViewInit() {
    configureDesignSystem(this.designSystemProviderElement.nativeElement, designTokens);
    registerStylesTarget(this.el.nativeElement, 'layout');
  }

  ngOnInit() {
    this.options = {
      draggable: { enabled: true },
      resizable: { enabled: true },
      // ...other options as needed
    };
  }
  
  navigateAngular = (path: string) => {
    this.router.navigate([path]);
  };

  onLogout = () => {
    this.router.navigate(['/login']);
  };
  
  onLuminanceToogle = (): void => {
    baseLayerLuminance.setValueFor(
      this.designSystemProviderElement.nativeElement,
      baseLayerLuminance.getValueFor(this.designSystemProviderElement.nativeElement) ===
        StandardLuminance.DarkMode
        ? StandardLuminance.LightMode
        : StandardLuminance.DarkMode,
    );
  };
} 