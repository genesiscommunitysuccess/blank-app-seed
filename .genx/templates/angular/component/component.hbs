import { Component, Input, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { getUser } from '@genesislcap/foundation-user';
import { ErrorMessageComponent } from '../../../components/error-message/error-message.component';
import { getViewUpdateRightComponent } from '../../../utils';
{{#if tile.config.customEvents}}
import { customActions as emCustomActions } from './{{kebabCase tile.title}}.events.config';
{{/if}}
{{#if tile.config.gridOptions}}
import { GridOptionsConfig } from "@genesislcap/rapid-grid-pro";
{{/if}}
{{#if tile.config.createFormUiSchema}}
import { createFormSchema } from './{{kebabCase tile.title}}.create.form.schema';
{{/if}}
{{#if tile.config.uischema}}
import { createFormSchema } from './{{kebabCase tile.title}}.create.form.schema';
{{/if}}
{{#if tile.config.updateFormUiSchema}}
import { updateFormSchema } from './{{kebabCase tile.title}}.update.form.schema';
{{/if}}
{{#if tile.config.columns}}
import { columnDefs } from './{{kebabCase tile.title}}.column.defs';
{{/if}}
{{#if tile.config.gridOptions}}
import { gridOptions } from './{{kebabCase tile.title}}.gridOptions';
{{/if}}
{{#ifAny tile.config.eventing.publishEventName tile.config.eventing.listener}}
import { actions, selectors } from '../../../store/store';
import { injectSelector } from '@reduxjs/angular-redux';
{{/ifAny}}

{{#ifAny tile.metadata.comment tile.metadata.todo}}
/**
{{~#if tile.metadata.comment}}{{{ tile.metadata.comment }}}{{/if}}
{{~#if tile.metadata.todo}}{{#if tile.metadata.comment}} 
 *{{/if}}
 * TODO: {{{ tile.metadata.todo }}}{{/if}}
 */
{{/ifAny}}

@Component({
  selector: 'app-{{kebabCase tile.componentName}}',
  templateUrl: './{{kebabCase tile.title}}.component.html',
  styleUrl: './{{kebabCase tile.title}}.component.css',
  standalone: true,
  imports: [
    ErrorMessageComponent,
    CommonModule,
  ],
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
})
export class {{pascalCase tile.componentName}} {
  hasUserPermission = (permissionCode: string) => getViewUpdateRightComponent(getUser(), permissionCode);{{#if tile.config.createFormUiSchema}}
  createFormSchema = createFormSchema;{{/if}}{{#if tile.config.uischema}}
  uischema = createFormSchema;{{/if}}{{#if tile.config.updateFormUiSchema}}
  updateFormSchema = updateFormSchema;{{/if}}{{#if tile.config.gridOptions}}
  gridOptions = gridOptions as GridOptionsConfig;{{/if}}{{#if tile.config.columns}}
  columnDefs = [
    ...columnDefs,
  ];{{/if}}{{#if tile.config.type}}
  chartConfig = { {{#ifEquals tile.config.type 'pie'}}
      "radius": 0.75,
      "angleField": "value",
      "colorField": "groupBy",{{else}}
      "xField": "groupBy",
      "yField": "value",{{/ifEquals}}
  };{{/if}}{{#if tile.config.customEvents}}
  customActions = emCustomActions;{{/if}}{{#ifAny tile.config.eventing.publishEventName tile.config.eventing.listener}}
  {{#if tile.config.eventing.listener}}
  criteria = injectSelector(selectors.eventing.getCriteriaFor{{pascalCase tile.title}});
  {{/if}}
  {{/ifAny}}{{#if tile.config.eventing.publishEventName}}
  handleRowSelection = (e: any) => {
    {{#ifEquals tile.componentType 'grid'}}
    const selectedRows = e.api.getSelectedRows();
    {{else}}
    const selectedRows = e.detail.api.getSelectedRows();
    {{/ifEquals}}
    if (!selectedRows || !selectedRows.length) {
        actions.eventing.publish{{pascalCase tile.config.eventing.publishEventName}}(null);
        return;
    };
    const { TIMESTAMP, RECORD_ID, ROW_REF, ...data } = selectedRows[0];
    actions.eventing.publish{{pascalCase tile.config.eventing.publishEventName}}(data);
  };{{/if}}
  {{#ifAny tile.config.gridOptions tile.config.eventing.publishEventName}}
  gridOptionsModel = {
    {{#if tile.config.gridOptions}}
    onRowClicked: gridOptions?.onRowClicked,{{/if}}{{#if tile.config.eventing.publishEventName}}{{#ifEquals tile.componentType 'grid'}}
    onSelectionChanged: this.handleRowSelection,
    rowSelection: 'single'{{/ifEquals}}{{/if}}
  };
  {{/ifAny}}
}